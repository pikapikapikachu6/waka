/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import org.checkerframework.checker.units.qual.A;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import processing.core.PApplet;
import processing.core.PImage;

import javax.swing.*;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    Waka waka;
    MapGrid mapGrid;
    PImage[] picture;
    PImage close_waka;
    PImage[] walls;
    PImage[] fruit;

    @Test
    /**
     * Create a new APP and check it create successfully.
     */
    public void simpleTest() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest);
    }
    App app;

    @BeforeEach
    /**
     * Set app before test the methpds
     */
    void setUp() {
        app = new App();
        PApplet.runSketch(new String[] {"App"}, app);
        app.setup();
    }

    @AfterEach
    /**
     * Release the app which means let app is null
     */
    void tearDown() {
        app = null;
    }

    @Test
    /**
     * Test method "setup". Check after set each ghosts start position list size are correct.
     */
    void testSetup() {
        assertEquals(app.ghosts_a.size(),1);
        assertEquals(app.ghosts_i.size(),1);
        assertEquals(app.ghosts_w.size(),1);
        assertEquals(app.ghosts_c.size(),1);
    }

    @Test
    /**
     * Test method "restart". Check after restart the game, the state is the original state.
     */
    void testRestart() {
        app.restart();
        assertEquals(app.ghosts_a.size(),1);
        assertEquals(app.ghosts_i.size(),1);
        assertEquals(app.ghosts_w.size(),1);
        assertEquals(app.ghosts_c.size(),1);
    }

    @Test
    /**
     * Test method "settings".
     */
    void testSettings() {
        app.settings();
    }

    @Test
    /**
     * Test method "draw".
     */
    void testDraw() {
        app = new App();
        PApplet.runSketch(new String[] {"App"}, app);
        app.setup();
        waka = new Waka (1, 3, picture, close_waka);
        waka = app.waka;
        mapGrid = new MapGrid("map.txt", walls, fruit);
        waka.mark = mapGrid.total_fruit;
        app.load_time = 599;
    }

    @Test
    /**
     * Test method "keyPressed". Check the app.dirc is equal with keycode.
     */
    void testKeyPressed() {
        app.dirc = 0;
        app.keyPressed();
        assertEquals(app.keyCode,app.dirc);
    }

    @Test
    void testMain() {
        app.main("ghost.App");
    }
}
